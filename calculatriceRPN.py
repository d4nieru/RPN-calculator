# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13hIOFO_dVHcp5KQLLBZFYhexO8v4hXGm
"""

class Pile:
  def __init__(self):
    self.pile = [] # on crée une liste vide lors de la création de l'objet.
  
  
  def inverse(pile_a_inverser):
   intermediaire = Pile()
   resultat      = Pile()
   while not pile_a_inverser.is_empty():
     element = pile_a_inverser.pop()
     resultat.push(element)
     intermediaire.push(element)
   while not intermediaire.is_empty(): 
     element = intermediaire.pop()
     pile_a_inverser.push(element)
   return resultat
  
  
  def push(self, element_a_empiler):

    self.pile.append(element_a_empiler)
    return self


  def size (self):
    return len(self.pile)


  def __len__(self):
    return self.size()


  def pop(self):
    assert self.size() > 0
    element = self.pile[-1]
    del self.pile[-1]
    return element


  def is_empty(self):
    return self.size()==0


  def affiche(self):
    print(self.pile)


  def add(self):
    empilement_1 = self.pop()
    empilement_2 = self.pop()
    result = empilement_1 + empilement_2
    self.push(result)
    self.affiche()
    return self


  def sub(self):
    empilement_1 = self.pop()
    empilement_2 = self.pop()
    result = empilement_1 - empilement_2
    self.push(result)
    self.affiche()
    return self


  def mul(self):
    empilement_1 = self.pop()
    empilement_2 = self.pop()
    result = empilement_1 * empilement_2
    self.push(result)
    self.affiche()
    return self


  def div(self):
    empilement_1 = self.pop()
    empilement_2 = self.pop()
    if empilement_2 == 0:
      print("La divsion est totalement IMPOSSIBLE")
    result = empilement_1 / empilement_2
    self.push(result)
    self.affiche()
    return self